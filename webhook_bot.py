#!/usr/bin/env python3
"""
SocialBoost Bot –∑ webhook –¥–ª—è –æ–ø–ª–∞—Ç
"""
import os
import asyncio
import logging
import requests
import threading
import hmac
import hashlib
from flask import Flask, request, jsonify
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env
load_dotenv()

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
bot = None
user_orders = {}  # –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å


class CryptoPayAPI:
    def __init__(self, token):
        self.token = token
        self.base_url = "https://pay.crypt.bot/api"

    def create_invoice(self, amount, description, payload=None):
        """–°—Ç–≤–æ—Ä—é—î —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏"""
        headers = {
            "Crypto-Pay-API-Token": self.token,
            "Content-Type": "application/json"
        }

        data = {
            "asset": "USDT",
            "amount": str(amount),
            "description": description,
            "payload": payload or "",
            "expires_in": 3600  # 1 –≥–æ–¥–∏–Ω–∞
        }

        try:
            response = requests.post(
                f"{self.base_url}/createInvoice",
                json=data,
                headers=headers,
                timeout=10
            )

            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    return result.get("result")

            print(f"CryptoBot API Error: {response.text}")
            return None

        except Exception as e:
            print(f"Error creating invoice: {e}")
            return None


# Flask app –¥–ª—è webhook
app = Flask(__name__)


@app.route('/webhook/cryptobot', methods=['POST'])
def cryptobot_webhook():
    """Webhook –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—ñ–≤ CryptoBot"""
    try:
        data = request.get_json()

        if not data:
            return jsonify({'error': 'No data'}), 400

        print(f"üí∞ Webhook received: {data}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if data.get('update_type') == 'invoice_paid':
            invoice = data.get('payload', {})
            payload = invoice.get('payload', '')
            status = invoice.get('status')
            amount = invoice.get('amount')

            if status == 'paid' and payload:
                # –†–æ–∑–±–∏—Ä–∞—î–º–æ payload: user_id_package_slug_message_id
                parts = payload.split('_')
                if len(parts) >= 2:
                    user_id = parts[0]
                    package_slug = parts[1]

                    print(f"‚úÖ Payment confirmed for user {user_id}, package {package_slug}")

                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É
                    user_orders[user_id] = {
                        'package_slug': package_slug,
                        'amount': amount,
                        'status': 'paid'
                    }

                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                    asyncio.create_task(notify_payment_success(user_id, package_slug, amount))

        return jsonify({'status': 'ok'}), 200

    except Exception as e:
        print(f"‚ùå Webhook error: {e}")
        return jsonify({'error': str(e)}), 500


async def notify_payment_success(user_id, package_slug, amount):
    """–°–ø–æ–≤—ñ—â–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É"""
    try:
        if bot:
            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–∞–∫–µ—Ç—É
            package_names = {
                'starter-mini': 'Starter Mini',
                'pro-advanced': 'Pro Advanced',
                'enterprise-elite': 'Enterprise Elite'
            }

            package_name = package_names.get(package_slug, 'Unknown Package')

            success_text = f"""
üéâ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!</b>

üì¶ <b>–ü–∞–∫–µ—Ç:</b> {package_name}
üí∞ <b>–°—É–º–∞:</b> ${amount} USDT

‚úÖ –í–∞—à –ø–∞–∫–µ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø–æ—Å—Ç–∏ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏.

–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.
"""

            await bot.send_message(
                chat_id=int(user_id),
                text=success_text,
                parse_mode="HTML"
            )

            print(f"‚úÖ Payment notification sent to user {user_id}")
    except Exception as e:
        print(f"‚ùå Error sending notification: {e}")


def run_flask():
    """–ó–∞–ø—É—Å–∫–∞—î Flask –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    print("üåê Flask webhook server starting on port 5000...")
    app.run(host='0.0.0.0', port=5000, debug=False)


async def main():
    try:
        global bot

        from aiogram import Bot, Dispatcher
        from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
        from aiogram.filters import CommandStart

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        logging.basicConfig(level=logging.INFO)

        # –¢–æ–∫–µ–Ω–∏
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        crypto_token = os.getenv('CRYPTOBOT_TOKEN')

        if not bot_token or not crypto_token:
            print("‚ùå –¢–æ–∫–µ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞ —Ç–∞ CryptoBot API
        bot = Bot(token=bot_token)
        dp = Dispatcher()
        crypto_api = CryptoPayAPI(crypto_token)

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()

        # –ü–∞–∫–µ—Ç–∏
        PACKAGES = {
            'starter-mini': {
                'name': 'Starter Mini',
                'price': 99.99,
                'description': '2 –ø–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å | –î–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤',
                'features': '‚Ä¢ 1,000-2,500 –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤\n‚Ä¢ 15-27 —Ä–µ–∞–∫—Ü—ñ–π\n‚Ä¢ 5-15 –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤'
            },
            'pro-advanced': {
                'name': 'Pro Advanced',
                'price': 299.99,
                'description': '3 –ø–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å | –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–∞–∫–µ—Ç',
                'features': '‚Ä¢ 8,000-15,000 –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤\n‚Ä¢ 60-120 —Ä–µ–∞–∫—Ü—ñ–π\n‚Ä¢ 35-65 –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤'
            },
            'enterprise-elite': {
                'name': 'Enterprise Elite',
                'price': 999.99,
                'description': '3 –ø–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å | –ù–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à–∏–π –ø–∞–∫–µ—Ç',
                'features': '‚Ä¢ 70,000-120,000 –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤\n‚Ä¢ 400-700 —Ä–µ–∞–∫—Ü—ñ–π\n‚Ä¢ 84-120 –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤'
            }
        }

        @dp.message(CommandStart())
        async def start_command(message: Message):
            user_id = str(message.from_user.id)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π –ø–∞–∫–µ—Ç
            active_package = user_orders.get(user_id)

            if active_package and active_package.get('status') == 'paid':
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîó –î–æ–¥–∞—Ç–∏ –ø–æ—Å—Ç", callback_data="add_post")],
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
                    [InlineKeyboardButton(text="üì¶ –í–∏–±—Ä–∞—Ç–∏ –Ω–æ–≤–∏–π –ø–∞–∫–µ—Ç", callback_data="packages")]
                ])

                welcome_text = f"""
üöÄ <b>–í—ñ—Ç–∞—î–º–æ –≤ SocialBoost Bot!</b>

‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∏–π –ø–∞–∫–µ—Ç! –ú–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø–æ—Å—Ç–∏ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏.

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:
"""
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì¶ –í–∏–±—Ä–∞—Ç–∏ –ø–∞–∫–µ—Ç", callback_data="packages")],
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
                ])

                welcome_text = """
üöÄ <b>–í—ñ—Ç–∞—î–º–æ –≤ SocialBoost Bot!</b>

üí∞ –û–±–µ—Ä—ñ—Ç—å –ø–∞–∫–µ—Ç —Ç–∞ –æ–ø–ª–∞—Ç—ñ—Ç—å —â–æ–± –ø–æ—á–∞—Ç–∏!

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:
"""

            await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")

        @dp.callback_query()
        async def handle_callback(callback: CallbackQuery):
            user_id = str(callback.from_user.id)

            if callback.data == "packages":
                # –ú–µ–Ω—é –ø–∞–∫–µ—Ç—ñ–≤
                packages_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"ü•â {PACKAGES['starter-mini']['name']} - ${PACKAGES['starter-mini']['price']:.0f}",
                        callback_data="pkg_starter-mini")],
                    [InlineKeyboardButton(
                        text=f"ü•à {PACKAGES['pro-advanced']['name']} - ${PACKAGES['pro-advanced']['price']:.0f}",
                        callback_data="pkg_pro-advanced")],
                    [InlineKeyboardButton(
                        text=f"ü•á {PACKAGES['enterprise-elite']['name']} - ${PACKAGES['enterprise-elite']['price']:.0f}",
                        callback_data="pkg_enterprise-elite")],
                    [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back")]
                ])

                await callback.message.edit_text(
                    "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø–∞–∫–µ—Ç–∏:</b>\n\n"
                    "–û–±–µ—Ä—ñ—Ç—å –ø–∞–∫–µ—Ç –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ç–∞ –æ–ø–ª–∞—Ç–∏:",
                    reply_markup=packages_keyboard,
                    parse_mode="HTML"
                )

            elif callback.data.startswith("pkg_"):
                # –î–µ—Ç–∞–ª—ñ –ø–∞–∫–µ—Ç—É (–∫–æ–¥ —Ç–∞–∫–∏–π –∂–µ —è–∫ —Ä–∞–Ω—ñ—à–µ)
                package_slug = callback.data.replace("pkg_", "")
                package = PACKAGES.get(package_slug)

                if package:
                    buy_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f"üí≥ –ö—É–ø–∏—Ç–∏ –∑–∞ ${package['price']:.0f}",
                                              callback_data=f"buy_{package_slug}")],
                        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –¥–æ –ø–∞–∫–µ—Ç—ñ–≤", callback_data="packages")]
                    ])

                    package_text = f"""
üì¶ <b>{package['name']}</b>

üí∞ <b>–¶—ñ–Ω–∞:</b> ${package['price']:.0f} USD/–º—ñ—Å—è—Ü—å

üìù <b>–û–ø–∏—Å:</b> {package['description']}

üìä <b>–©–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>
{package['features']}

üéØ <b>–ü—Ä–∏—Ä–æ–¥–Ω—ñ—Å—Ç—å:</b> ¬±30% —Ä–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—è
‚ö° <b>–®–≤–∏–¥–∫—ñ—Å—Ç—å:</b> 80% –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ CryptoBot
"""

                    await callback.message.edit_text(
                        package_text,
                        reply_markup=buy_keyboard,
                        parse_mode="HTML"
                    )

            elif callback.data.startswith("buy_"):
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ (–∫–æ–¥ —Ç–∞–∫–∏–π –∂–µ)
                package_slug = callback.data.replace("buy_", "")
                package = PACKAGES.get(package_slug)

                if package:
                    payload = f"{callback.from_user.id}_{package_slug}_{callback.message.message_id}"

                    invoice = crypto_api.create_invoice(
                        amount=package['price'],
                        description=f"SocialBoost - {package['name']}",
                        payload=payload
                    )

                    if invoice:
                        payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑", url=invoice['pay_url'])],
                            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="packages")]
                        ])

                        payment_text = f"""
üí≥ <b>–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>

üì¶ –ü–∞–∫–µ—Ç: <b>{package['name']}</b>
üí∞ –°—É–º–∞: <b>${package['price']:.0f} USDT</b>

üîó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –æ–ø–ª–∞—Ç–∏.

‚úÖ <b>–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –ø–∞–∫–µ—Ç –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!</b>

‚è±Ô∏è –†–∞—Ö—É–Ω–æ–∫ –¥—ñ–π—Å–Ω–∏–π 1 –≥–æ–¥–∏–Ω—É.
"""

                        await callback.message.edit_text(
                            payment_text,
                            reply_markup=payment_keyboard,
                            parse_mode="HTML"
                        )
                    else:
                        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)

            elif callback.data == "add_post":
                # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å—Ç–∞
                active_package = user_orders.get(user_id)

                if active_package and active_package.get('status') == 'paid':
                    await callback.message.edit_text(
                        "üîó <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å—Ç–∞</b>\n\n"
                        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à –ø–æ—Å—Ç —ñ –º–∏ —Ä–æ–∑–ø–æ—á–Ω–µ–º–æ –Ω–∞–∫—Ä—É—Ç–∫—É!\n\n"
                        "–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏:\n"
                        "‚Ä¢ Telegram\n‚Ä¢ Instagram\n‚Ä¢ TikTok\n‚Ä¢ YouTube",
                        parse_mode="HTML"
                    )
                else:
                    await callback.answer("‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–∞ –æ–ø–ª–∞—Ç—ñ—Ç—å –ø–∞–∫–µ—Ç!", show_alert=True)

            elif callback.data == "stats":
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                active_package = user_orders.get(user_id)

                if active_package and active_package.get('status') == 'paid':
                    package_names = {
                        'starter-mini': 'Starter Mini',
                        'pro-advanced': 'Pro Advanced',
                        'enterprise-elite': 'Enterprise Elite'
                    }

                    package_name = package_names.get(active_package['package_slug'], 'Unknown')

                    stats_text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{callback.from_user.username or '–ù–µ–≤—ñ–¥–æ–º–æ'}
üí∞ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: ${active_package['amount']} USDT
üì¶ –ê–∫—Ç–∏–≤–Ω–∏–π –ø–∞–∫–µ—Ç: {package_name}
üìù –ü–æ—Å—Ç—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ: 0

‚úÖ –ü–∞–∫–µ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π! –î–æ–¥–∞–≤–∞–π—Ç–µ –ø–æ—Å—Ç–∏ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏.
"""
                else:
                    stats_text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{callback.from_user.username or '–ù–µ–≤—ñ–¥–æ–º–æ'}
üí∞ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: $0.00
üì¶ –ê–∫—Ç–∏–≤–Ω–∏–π –ø–∞–∫–µ—Ç: –ù–µ–º–∞—î
üìù –ü–æ—Å—Ç—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ: 0

üí° –û–±–µ—Ä—ñ—Ç—å –ø–∞–∫–µ—Ç —â–æ–± –ø–æ—á–∞—Ç–∏!
"""

                back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back")]
                ])

                await callback.message.edit_text(stats_text, reply_markup=back_keyboard, parse_mode="HTML")

            elif callback.data == "back":
                # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
                await start_command(callback.message)

            await callback.answer()

        print("üöÄ –ë–æ—Ç –∑ webhook –∑–∞–ø—É—â–µ–Ω–∏–π!")
        print(f"‚úÖ Bot Token: {bot_token[:10]}...")
        print(f"‚úÖ CryptoBot Token: {crypto_token[:10]}...")
        print("üí≥ Webhook –≥–æ—Ç–æ–≤–∏–π –ø—Ä–∏–π–º–∞—Ç–∏ –ø–ª–∞—Ç–µ–∂—ñ!")
        print("üåê Webhook URL: http://localhost:5000/webhook/cryptobot")

        await dp.start_polling(bot)

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())