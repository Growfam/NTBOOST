#!/usr/bin/env python3
"""
SocialBoost Bot - Main Entry Point
–ü—Ä–æ—Å—Ç–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω–∏–π –±–æ—Ç –¥–ª—è –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω—å —Ç–∞ –ø–µ—Ä–µ–¥–∞—á—ñ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É

–ó–∞–ø—É—Å–∫: python main.py
"""

import os
import sys
import asyncio
import threading
import signal
from pathlib import Path
import structlog

# –î–æ–¥–∞—î–º–æ backend –¥–æ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))

from backend.app import create_app
from backend.bot.main import setup_bot, shutdown_bot, bot, dp
from backend.config import get_config
from backend.utils.logger import setup_logging
from backend.api.webhooks import webhooks_bp
from backend.api.health import health_bp

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
setup_logging()
logger = structlog.get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
flask_app = None
bot_task = None
shutdown_event = asyncio.Event()


def validate_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    config = get_config()
    errors = config.validate()

    if errors:
        logger.error("Environment validation failed:")
        for error in errors:
            logger.error(f"  - {error}")
        return False

    logger.info("Environment validation passed")
    return True


async def run_bot():
    """–ó–∞–ø—É—Å–∫–∞—î Telegram –±–æ—Ç–∞"""
    try:
        logger.info("ü§ñ Starting Telegram bot...")

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –±–æ—Ç–∞
        if not await setup_bot():
            logger.error("Failed to setup bot")
            return False

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–ª–ª—ñ–Ω–≥ –∞–±–æ webhook –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        config = get_config()

        if config.TELEGRAM_WEBHOOK_URL:
            # Webhook —Ä–µ–∂–∏–º - –±–æ—Ç –±—É–¥–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ –∑–∞–ø–∏—Ç–∏ —á–µ—Ä–µ–∑ Flask
            logger.info("Bot configured for webhook mode")

            # –ü—Ä–æ—Å—Ç–æ —á–µ–∫–∞—î–º–æ —Å–∏–≥–Ω–∞–ª—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            await shutdown_event.wait()
        else:
            # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏
            logger.info("Bot configured for polling mode")
            await dp.start_polling(bot)

        return True

    except Exception as e:
        logger.error(f"Error running bot: {e}")
        return False
    finally:
        await shutdown_bot()


def run_flask_app():
    """–ó–∞–ø—É—Å–∫–∞—î Flask –¥–æ–¥–∞—Ç–æ–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    try:
        global flask_app
        config = get_config()

        logger.info("üåê Starting Flask server...")

        # –°—Ç–≤–æ—Ä—é—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫
        flask_app = create_app()

        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ blueprints
        flask_app.register_blueprint(webhooks_bp)
        flask_app.register_blueprint(health_bp)

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
        flask_app.run(
            host=config.HOST,
            port=config.PORT,
            debug=config.DEBUG,
            use_reloader=False,  # –í–∞–∂–ª–∏–≤–æ: –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ reloader –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ
            threaded=True
        )

    except Exception as e:
        logger.error(f"Error running Flask app: {e}")
        shutdown_event.set()


async def graceful_shutdown(signum=None):
    """Graceful shutdown"""
    signal_name = signal.Signals(signum).name if signum else "MANUAL"
    logger.info(f"üõë Received shutdown signal: {signal_name}")

    try:
        # –°–∏–≥–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        shutdown_event.set()

        # –ó—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞
        await shutdown_bot()

        logger.info("‚úÖ Graceful shutdown completed")

    except Exception as e:
        logger.error(f"Error during shutdown: {e}")
    finally:
        # –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        os._exit(0)


def setup_signal_handlers():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤"""

    def signal_handler(signum, frame):
        logger.info(f"Signal {signum} received, initiating shutdown...")
        asyncio.create_task(graceful_shutdown(signum))

    # Unix —Å–∏–≥–Ω–∞–ª–∏
    if hasattr(signal, 'SIGTERM'):
        signal.signal(signal.SIGTERM, signal_handler)
    if hasattr(signal, 'SIGINT'):
        signal.signal(signal.SIGINT, signal_handler)


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        logger.info("üöÄ Starting SocialBoost Interface Bot...")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        if not validate_environment():
            logger.error("‚ùå Environment validation failed")
            return False

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤
        setup_signal_handlers()

        config = get_config()

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        flask_thread = threading.Thread(
            target=run_flask_app,
            daemon=True,
            name="FlaskThread"
        )
        flask_thread.start()

        # –î–∞—î–º–æ Flask —á–∞—Å –Ω–∞ –∑–∞–ø—É—Å–∫
        await asyncio.sleep(2)

        logger.info(f"üåê Flask server started on {config.HOST}:{config.PORT}")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        await run_bot()

        return True

    except KeyboardInterrupt:
        logger.info("üëã Keyboard interrupt received")
        await graceful_shutdown()
        return True
    except Exception as e:
        logger.error(f"üí• Fatal error in main: {e}")
        return False


def sync_main():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è main()"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        success = loop.run_until_complete(main())

        return 0 if success else 1

    except Exception as e:
        logger.error(f"üí• Critical error: {e}")
        return 1
    finally:
        try:
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ loop
            loop.close()
        except:
            pass


if __name__ == "__main__":
    # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø—É—Å–∫
    print("=" * 60)
    print("ü§ñ SocialBoost Interface Bot")
    print("üìù Simple order collection and payment processing")
    print("üîó Integrates with main processing bot")
    print("=" * 60)

    try:
        exit_code = sync_main()
        sys.exit(exit_code)
    except Exception as e:
        print(f"üí• Failed to start: {e}")
        sys.exit(1)