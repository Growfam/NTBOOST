#!/usr/bin/env python3
"""
SocialBoost Bot - Main Entry Point - –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø
–ü—Ä–æ—Å—Ç–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω–∏–π –±–æ—Ç –¥–ª—è –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω—å —Ç–∞ –ø–µ—Ä–µ–¥–∞—á—ñ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É

–ó–∞–ø—É—Å–∫: python main.py
"""

import os
import sys
import asyncio
import threading
import signal
from pathlib import Path
import structlog
import time

# –î–æ–¥–∞—î–º–æ backend –¥–æ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))

from backend.config import get_config
from backend.utils.logger import setup_logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
setup_logging()
logger = structlog.get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
flask_app = None
flask_thread = None
bot_task = None
shutdown_event = None
main_loop = None


def validate_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    config = get_config()
    errors = config.validate()

    if errors:
        logger.error("Environment validation failed:")
        for error in errors:
            logger.error(f"  - {error}")
        return False

    logger.info("Environment validation passed")
    return True


async def run_bot():
    """–ó–∞–ø—É—Å–∫–∞—î Telegram –±–æ—Ç–∞"""
    try:
        logger.info("ü§ñ Starting Telegram bot...")

        # –í–ò–ü–†–ê–í–õ–ï–ù–û: Lazy import –∑ proper error handling
        try:
            from backend.bot.main import setup_bot, shutdown_bot, get_bot, get_dispatcher
        except ImportError as e:
            logger.error(f"Failed to import bot modules: {e}")
            return False

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –±–æ—Ç–∞
        if not await setup_bot():
            logger.error("Failed to setup bot")
            return False

        config = get_config()

        if config.TELEGRAM_WEBHOOK_URL:
            # Webhook —Ä–µ–∂–∏–º - –±–æ—Ç –±—É–¥–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ –∑–∞–ø–∏—Ç–∏ —á–µ—Ä–µ–∑ Flask
            logger.info("Bot configured for webhook mode")

            # –ü—Ä–æ—Å—Ç–æ —á–µ–∫–∞—î–º–æ —Å–∏–≥–Ω–∞–ª—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            while not shutdown_event.is_set():
                await asyncio.sleep(1)
        else:
            # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏
            logger.info("Bot configured for polling mode")

            try:
                bot = await get_bot()
                dp = await get_dispatcher()

                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–ª–ª—ñ–Ω–≥ –∑ graceful shutdown
                await dp.start_polling(bot, handle_signals=False)
            except asyncio.CancelledError:
                logger.info("Bot polling cancelled")

        return True

    except Exception as e:
        logger.error(f"Error running bot: {e}")
        return False
    finally:
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–ø–µ—á–Ω–∏–π cleanup
        try:
            from backend.bot.main import shutdown_bot
            await shutdown_bot()
        except (ImportError, Exception) as e:
            logger.warning(f"Could not perform bot shutdown: {e}")


def run_flask_app():
    """–ó–∞–ø—É—Å–∫–∞—î Flask –¥–æ–¥–∞—Ç–æ–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    try:
        global flask_app
        config = get_config()

        logger.info("üåê Starting Flask server...")

        # –í–ò–ü–†–ê–í–õ–ï–ù–û: Lazy import –∑ error handling
        try:
            from backend.app import create_app
            from backend.api.webhooks import webhooks_bp
            from backend.api.health import health_bp
        except ImportError as e:
            logger.error(f"Failed to import Flask modules: {e}")
            if shutdown_event:
                shutdown_event.set()
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫
        flask_app = create_app()

        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ blueprints
        flask_app.register_blueprint(webhooks_bp)
        flask_app.register_blueprint(health_bp)

        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ cleanup handler –¥–ª—è Flask
        import atexit

        def cleanup_flask():
            try:
                from backend.app import cleanup_thread_pool
                cleanup_thread_pool()
                logger.info("Flask cleanup completed")
            except Exception as e:
                logger.error(f"Flask cleanup error: {e}")

        atexit.register(cleanup_flask)

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
        flask_app.run(
            host=config.HOST,
            port=config.PORT,
            debug=config.DEBUG,
            use_reloader=False,  # –í–∞–∂–ª–∏–≤–æ: –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ reloader
            threaded=True
        )

    except Exception as e:
        logger.error(f"Error running Flask app: {e}")
        if shutdown_event:
            shutdown_event.set()


async def graceful_shutdown():
    """Graceful shutdown –∑ improved error handling"""
    logger.info("üõë Initiating graceful shutdown...")

    try:
        shutdown_tasks = []

        # –°–∏–≥–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        if shutdown_event:
            shutdown_event.set()

        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–ø–µ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –¥–ª—è shutdown
        try:
            from backend.bot.main import shutdown_bot
            shutdown_tasks.append(shutdown_bot())
        except ImportError:
            logger.warning("Could not import shutdown_bot for cleanup")
        except Exception as e:
            logger.error(f"Error importing bot shutdown: {e}")

        # –û—á–∏—â–∞—î–º–æ Flask app
        if flask_app:
            try:
                from backend.app import cleanup_thread_pool
                cleanup_thread_pool()
            except Exception as e:
                logger.error(f"Flask cleanup error: {e}")

        # –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ timeout
        if shutdown_tasks:
            try:
                await asyncio.wait_for(
                    asyncio.gather(*shutdown_tasks, return_exceptions=True),
                    timeout=10.0
                )
            except asyncio.TimeoutError:
                logger.warning("Shutdown tasks timeout")

        logger.info("‚úÖ Graceful shutdown completed")

    except Exception as e:
        logger.error(f"Error during shutdown: {e}")
    finally:
        # –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(1)
        os._exit(0)


def setup_signal_handlers(loop):
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ improved error handling"""

    def signal_handler(signum, frame):
        try:
            signal_name = signal.Signals(signum).name if signum else "MANUAL"
            logger.info(f"Signal {signal_name} received, initiating shutdown...")

            # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ loop –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –¥–æ—Å—Ç—É–ø–Ω–∏–π
            if loop and not loop.is_closed():
                try:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ call_soon_threadsafe –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
                    loop.call_soon_threadsafe(
                        lambda: asyncio.create_task(graceful_shutdown())
                    )
                except Exception as e:
                    logger.error(f"Failed to schedule shutdown: {e}")
                    os._exit(1)
            else:
                # –Ø–∫—â–æ loop –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Ä–æ–±–∏–º–æ —à–≤–∏–¥–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                logger.warning("Event loop not available, forcing exit")
                os._exit(1)
        except Exception as e:
            logger.error(f"Signal handler error: {e}")
            os._exit(1)

    # Unix —Å–∏–≥–Ω–∞–ª–∏
    if hasattr(signal, 'SIGTERM'):
        signal.signal(signal.SIGTERM, signal_handler)
    if hasattr(signal, 'SIGINT'):
        signal.signal(signal.SIGINT, signal_handler)


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ improved error handling"""
    global shutdown_event, main_loop, flask_thread

    try:
        logger.info("üöÄ Starting SocialBoost Interface Bot...")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        if not validate_environment():
            logger.error("‚ùå Environment validation failed")
            return False

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ main loop
        main_loop = asyncio.get_running_loop()

        # –°—Ç–≤–æ—Ä—é—î–º–æ event –¥–ª—è shutdown
        shutdown_event = asyncio.Event()

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤
        setup_signal_handlers(main_loop)

        config = get_config()

        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ –∑ error handling
        try:
            flask_thread = threading.Thread(
                target=run_flask_app,
                daemon=True,
                name="FlaskThread"
            )
            flask_thread.start()

            # –î–∞—î–º–æ Flask —á–∞—Å –Ω–∞ –∑–∞–ø—É—Å–∫
            await asyncio.sleep(3)

            if flask_thread.is_alive():
                logger.info(f"üåê Flask server started on {config.HOST}:{config.PORT}")
            else:
                logger.error("Flask thread failed to start")
                return False

        except Exception as e:
            logger.error(f"Failed to start Flask thread: {e}")
            return False

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        bot_result = await run_bot()

        return bot_result

    except KeyboardInterrupt:
        logger.info("üëã Keyboard interrupt received")
        await graceful_shutdown()
        return True
    except Exception as e:
        logger.error(f"üí• Fatal error in main: {e}")
        return False


def sync_main():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è main() –∑ improved error handling"""
    try:
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        if sys.platform == 'win32':
            # Windows –ø–æ—Ç—Ä–µ–±—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ debug —Ä–µ–∂–∏–º —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        config = get_config()
        if config.DEBUG:
            loop.set_debug(True)

        try:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            success = loop.run_until_complete(main())
            return 0 if success else 1
        except KeyboardInterrupt:
            logger.info("KeyboardInterrupt in sync_main")
            return 0

    except Exception as e:
        logger.error(f"üí• Critical error: {e}")
        return 1
    finally:
        try:
            # –í–ò–ü–†–ê–í–õ–ï–ù–û: Proper cleanup loop
            if 'loop' in locals() and loop:
                # –°–∫–∞—Å–æ–≤—É—î–º–æ –≤—Å—ñ pending tasks
                try:
                    pending = asyncio.all_tasks(loop)
                    if pending:
                        for task in pending:
                            task.cancel()

                        # –ß–µ–∫–∞—î–º–æ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑ timeout
                        try:
                            loop.run_until_complete(
                                asyncio.wait_for(
                                    asyncio.gather(*pending, return_exceptions=True),
                                    timeout=5.0
                                )
                            )
                        except asyncio.TimeoutError:
                            logger.warning("Some tasks did not complete in time")
                except Exception as e:
                    logger.error(f"Error cleaning up tasks: {e}")

                # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ loop
                try:
                    if not loop.is_closed():
                        loop.close()
                except Exception as e:
                    logger.error(f"Error closing loop: {e}")
        except Exception as e:
            logger.error(f"Error during final cleanup: {e}")


if __name__ == "__main__":
    # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø—É—Å–∫
    print("=" * 60)
    print("ü§ñ SocialBoost Interface Bot")
    print("üìù Simple order collection and payment processing")
    print("üîó Integrates with main processing bot")
    print("=" * 60)

    start_time = time.time()

    try:
        exit_code = sync_main()
        duration = time.time() - start_time

        if exit_code == 0:
            print(f"‚úÖ Bot stopped successfully after {duration:.1f}s")
        else:
            print(f"‚ùå Bot stopped with errors after {duration:.1f}s")

        sys.exit(exit_code)

    except Exception as e:
        duration = time.time() - start_time
        print(f"üí• Failed to start after {duration:.1f}s: {e}")
        sys.exit(1)