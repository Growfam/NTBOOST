#!/usr/bin/env python3
"""
SocialBoost Bot –∑ –ø–ª–∞—Ç–µ–∂–∞–º–∏
"""
import os
import asyncio
import logging
import requests
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env
load_dotenv()


class CryptoPayAPI:
    def __init__(self, token):
        self.token = token
        self.base_url = "https://pay.crypt.bot/api"

    def create_invoice(self, amount, description, payload=None):
        """–°—Ç–≤–æ—Ä—é—î —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏"""
        headers = {
            "Crypto-Pay-API-Token": self.token,
            "Content-Type": "application/json"
        }

        data = {
            "asset": "USDT",
            "amount": str(amount),
            "description": description,
            "payload": payload or "",
            "expires_in": 3600  # 1 –≥–æ–¥–∏–Ω–∞
        }

        try:
            response = requests.post(
                f"{self.base_url}/createInvoice",
                json=data,
                headers=headers,
                timeout=10
            )

            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    return result.get("result")

            print(f"CryptoBot API Error: {response.text}")
            return None

        except Exception as e:
            print(f"Error creating invoice: {e}")
            return None


async def main():
    try:
        from aiogram import Bot, Dispatcher
        from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
        from aiogram.filters import CommandStart

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        logging.basicConfig(level=logging.INFO)

        # –¢–æ–∫–µ–Ω–∏
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        crypto_token = os.getenv('CRYPTOBOT_TOKEN')

        if not bot_token or not crypto_token:
            print("‚ùå –¢–æ–∫–µ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞ —Ç–∞ CryptoBot API
        bot = Bot(token=bot_token)
        dp = Dispatcher()
        crypto_api = CryptoPayAPI(crypto_token)

        # –ü–∞–∫–µ—Ç–∏ (—Ç–∏–º—á–∞—Å–æ–≤–æ –≤ –∫–æ–¥—ñ)
        PACKAGES = {
            'starter-mini': {
                'name': 'Starter Mini',
                'price': 99.99,
                'description': '2 –ø–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å | –î–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤',
                'features': '‚Ä¢ 1,000-2,500 –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤\n‚Ä¢ 15-27 —Ä–µ–∞–∫—Ü—ñ–π\n‚Ä¢ 5-15 –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤'
            },
            'pro-advanced': {
                'name': 'Pro Advanced',
                'price': 299.99,
                'description': '3 –ø–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å | –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–∞–∫–µ—Ç',
                'features': '‚Ä¢ 8,000-15,000 –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤\n‚Ä¢ 60-120 —Ä–µ–∞–∫—Ü—ñ–π\n‚Ä¢ 35-65 –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤'
            },
            'enterprise-elite': {
                'name': 'Enterprise Elite',
                'price': 999.99,
                'description': '3 –ø–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å | –ù–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à–∏–π –ø–∞–∫–µ—Ç',
                'features': '‚Ä¢ 70,000-120,000 –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤\n‚Ä¢ 400-700 —Ä–µ–∞–∫—Ü—ñ–π\n‚Ä¢ 84-120 –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤'
            }
        }

        @dp.message(CommandStart())
        async def start_command(message: Message):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –í–∏–±—Ä–∞—Ç–∏ –ø–∞–∫–µ—Ç", callback_data="packages")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
                [InlineKeyboardButton(text="üîó –î–æ–¥–∞—Ç–∏ –ø–æ—Å—Ç", callback_data="add_post")]
            ])

            await message.answer(
                "üöÄ <b>–í—ñ—Ç–∞—î–º–æ –≤ SocialBoost Bot!</b>\n\n"
                "üí∞ –¢–µ–ø–µ—Ä –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ CryptoBot!\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        @dp.callback_query()
        async def handle_callback(callback: CallbackQuery):
            if callback.data == "packages":
                # –ú–µ–Ω—é –ø–∞–∫–µ—Ç—ñ–≤
                packages_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"ü•â {PACKAGES['starter-mini']['name']} - ${PACKAGES['starter-mini']['price']:.0f}",
                        callback_data="pkg_starter-mini")],
                    [InlineKeyboardButton(
                        text=f"ü•à {PACKAGES['pro-advanced']['name']} - ${PACKAGES['pro-advanced']['price']:.0f}",
                        callback_data="pkg_pro-advanced")],
                    [InlineKeyboardButton(
                        text=f"ü•á {PACKAGES['enterprise-elite']['name']} - ${PACKAGES['enterprise-elite']['price']:.0f}",
                        callback_data="pkg_enterprise-elite")],
                    [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back")]
                ])

                await callback.message.edit_text(
                    "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø–∞–∫–µ—Ç–∏:</b>\n\n"
                    "–û–±–µ—Ä—ñ—Ç—å –ø–∞–∫–µ—Ç –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ç–∞ –æ–ø–ª–∞—Ç–∏:",
                    reply_markup=packages_keyboard,
                    parse_mode="HTML"
                )

            elif callback.data.startswith("pkg_"):
                # –î–µ—Ç–∞–ª—ñ –ø–∞–∫–µ—Ç—É
                package_slug = callback.data.replace("pkg_", "")
                package = PACKAGES.get(package_slug)

                if package:
                    buy_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f"üí≥ –ö—É–ø–∏—Ç–∏ –∑–∞ ${package['price']:.0f}",
                                              callback_data=f"buy_{package_slug}")],
                        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –¥–æ –ø–∞–∫–µ—Ç—ñ–≤", callback_data="packages")]
                    ])

                    package_text = f"""
üì¶ <b>{package['name']}</b>

üí∞ <b>–¶—ñ–Ω–∞:</b> ${package['price']:.0f} USD/–º—ñ—Å—è—Ü—å

üìù <b>–û–ø–∏—Å:</b> {package['description']}

üìä <b>–©–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>
{package['features']}

üéØ <b>–ü—Ä–∏—Ä–æ–¥–Ω—ñ—Å—Ç—å:</b> ¬±30% —Ä–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—è
‚ö° <b>–®–≤–∏–¥–∫—ñ—Å—Ç—å:</b> 80% –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
"""

                    await callback.message.edit_text(
                        package_text,
                        reply_markup=buy_keyboard,
                        parse_mode="HTML"
                    )

            elif callback.data.startswith("buy_"):
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –æ–ø–ª–∞—Ç–∏
                package_slug = callback.data.replace("buy_", "")
                package = PACKAGES.get(package_slug)

                if package:
                    # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π payload –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                    payload = f"{callback.from_user.id}_{package_slug}_{callback.message.message_id}"

                    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–∞—Ö—É–Ω–æ–∫ –≤ CryptoBot
                    invoice = crypto_api.create_invoice(
                        amount=package['price'],
                        description=f"SocialBoost - {package['name']}",
                        payload=payload
                    )

                    if invoice:
                        payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑", url=invoice['pay_url'])],
                            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–ø–ª–∞—Ç—É",
                                                  callback_data=f"check_{invoice['invoice_id']}")],
                            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="packages")]
                        ])

                        payment_text = f"""
üí≥ <b>–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>

üì¶ –ü–∞–∫–µ—Ç: <b>{package['name']}</b>
üí∞ –°—É–º–∞: <b>${package['price']:.0f} USDT</b>

üîó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –æ–ø–ª–∞—Ç–∏.

‚è±Ô∏è –†–∞—Ö—É–Ω–æ–∫ –¥—ñ–π—Å–Ω–∏–π 1 –≥–æ–¥–∏–Ω—É.
"""

                        await callback.message.edit_text(
                            payment_text,
                            reply_markup=payment_keyboard,
                            parse_mode="HTML"
                        )
                    else:
                        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)

            elif callback.data.startswith("check_"):
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏ (—Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–≥–ª—É—à–∫–∞)
                await callback.answer("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø–ª–∞—Ç–∏... (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)", show_alert=True)

            elif callback.data == "stats":
                stats_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back")]
                ])

                await callback.message.edit_text(
                    "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                    f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{callback.from_user.username or '–ù–µ–≤—ñ–¥–æ–º–æ'}\n"
                    "üí∞ –ë–∞–ª–∞–Ω—Å: $0.00\n"
                    "üìù –ü–æ—Å—Ç—ñ–≤: 0\n"
                    "üì¶ –ê–∫—Ç–∏–≤–Ω–∏–π –ø–∞–∫–µ—Ç: –ù–µ–º–∞—î\n\n"
                    "üí° –û–±–µ—Ä—ñ—Ç—å –ø–∞–∫–µ—Ç —â–æ–± –ø–æ—á–∞—Ç–∏!",
                    reply_markup=stats_keyboard,
                    parse_mode="HTML"
                )

            elif callback.data == "add_post":
                back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back")]
                ])

                await callback.message.edit_text(
                    "üîó <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å—Ç–∞</b>\n\n"
                    "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–∞ –æ–ø–ª–∞—Ç—ñ—Ç—å –ø–∞–∫–µ—Ç —É –º–µ–Ω—é '–í–∏–±—Ä–∞—Ç–∏ –ø–∞–∫–µ—Ç'.\n\n"
                    "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø–æ—Å—Ç–∏ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏.",
                    reply_markup=back_keyboard,
                    parse_mode="HTML"
                )

            elif callback.data == "back":
                # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì¶ –í–∏–±—Ä–∞—Ç–∏ –ø–∞–∫–µ—Ç", callback_data="packages")],
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
                    [InlineKeyboardButton(text="üîó –î–æ–¥–∞—Ç–∏ –ø–æ—Å—Ç", callback_data="add_post")]
                ])

                await callback.message.edit_text(
                    "üöÄ <b>–í—ñ—Ç–∞—î–º–æ –≤ SocialBoost Bot!</b>\n\n"
                    "üí∞ –¢–µ–ø–µ—Ä –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ CryptoBot!\n\n"
                    "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )

            await callback.answer()

        print("üöÄ –ë–æ—Ç –∑ –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∑–∞–ø—É—â–µ–Ω–∏–π!")
        print(f"‚úÖ Bot Token: {bot_token[:10]}...")
        print(f"‚úÖ CryptoBot Token: {crypto_token[:10]}...")
        print("üí≥ –¢–µ—Å—Ç—É–π—Ç–µ –ø–ª–∞—Ç–µ–∂—ñ!")

        await dp.start_polling(bot)

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())