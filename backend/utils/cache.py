# backend/utils/cache.py
"""
Redis –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è —à–≤–∏–¥–∫–æ–¥—ñ—ó
"""
import json
import redis
from typing import Any, Optional
import structlog

from backend.config import get_config

config = get_config()
logger = structlog.get_logger(__name__)


class RedisCache:
    """–ü—Ä–æ—Å—Ç–∏–π Redis –∫–µ—à"""

    def __init__(self):
        self._redis: Optional[redis.Redis] = None

    def connect(self) -> redis.Redis:
        """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis"""
        if not self._redis:
            self._redis = redis.from_url(config.REDIS_URL, decode_responses=True)
            logger.info("Connected to Redis")
        return self._redis

    def set(self, key: str, value: Any, ttl: int = None) -> bool:
        """–ó–±–µ—Ä—ñ–≥–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–µ—à—ñ"""
        try:
            r = self.connect()
            json_value = json.dumps(value, ensure_ascii=False)
            ttl = ttl or config.CACHE_TTL
            r.setex(key, ttl, json_value)
            return True
        except Exception as e:
            logger.error(f"Cache set error for key {key}", error=str(e))
            return False

    def get(self, key: str) -> Any:
        """–û—Ç—Ä–∏–º—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–µ—à—É"""
        try:
            r = self.connect()
            value = r.get(key)
            if value:
                return json.loads(value)
            return None
        except Exception as e:
            logger.error(f"Cache get error for key {key}", error=str(e))
            return None

    def delete(self, key: str) -> bool:
        """–í–∏–¥–∞–ª—è—î –∫–ª—é—á –∑ –∫–µ—à—É"""
        try:
            r = self.connect()
            r.delete(key)
            return True
        except Exception as e:
            logger.error(f"Cache delete error for key {key}", error=str(e))
            return False

    def exists(self, key: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞"""
        try:
            r = self.connect()
            return bool(r.exists(key))
        except Exception as e:
            logger.error(f"Cache exists error for key {key}", error=str(e))
            return False


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —ñ–Ω—Å—Ç–∞–Ω—Å –∫–µ—à—É
cache = RedisCache()


# –ó—Ä—É—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –±–æ—Ç–∞
def cache_user_stats(telegram_id: str, stats: dict, ttl: int = 300):
    """–ö–µ—à—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω"""
    cache.set(f"user_stats:{telegram_id}", stats, ttl)


def get_cached_user_stats(telegram_id: str) -> Optional[dict]:
    """–û—Ç—Ä–∏–º—É—î –∑–∞–∫–µ—à–æ–≤–∞–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    return cache.get(f"user_stats:{telegram_id}")


def cache_packages(packages: list, ttl: int = 600):
    """–ö–µ—à—É—î —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç—ñ–≤ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω"""
    cache.set("packages", packages, ttl)


def get_cached_packages() -> Optional[list]:
    """–û—Ç—Ä–∏–º—É—î –∑–∞–∫–µ—à–æ–≤–∞–Ω—ñ –ø–∞–∫–µ—Ç–∏"""
    return cache.get("packages")


def invalidate_user_cache(telegram_id: str):
    """–û—á–∏—â–∞—î –∫–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    cache.delete(f"user_stats:{telegram_id}")


# ===================================

# backend/utils/logger.py
"""
–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
"""
import os
import sys
import structlog
from pathlib import Path

from backend.config import get_config

config = get_config()


def setup_logging():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î —Å–∏—Å—Ç–µ–º—É –ª–æ–≥—É–≤–∞–Ω–Ω—è"""

    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥—ñ–≤
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è structlog
    structlog.configure(
        processors=[
            structlog.stdlib.filter_by_level,
            structlog.stdlib.add_logger_name,
            structlog.stdlib.add_log_level,
            structlog.stdlib.PositionalArgumentsFormatter(),
            structlog.processors.TimeStamper(fmt="iso"),
            structlog.processors.StackInfoRenderer(),
            structlog.processors.format_exc_info,
            structlog.processors.UnicodeDecoder(),
            structlog.processors.JSONRenderer()
        ],
        context_class=dict,
        logger_factory=structlog.stdlib.LoggerFactory(),
        wrapper_class=structlog.stdlib.BoundLogger,
        cache_logger_on_first_use=True,
    )

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è Python
    import logging
    import logging.handlers

    # –û—Å–Ω–æ–≤–Ω–∏–π logger
    logging.basicConfig(
        format="%(message)s",
        stream=sys.stdout,
        level=getattr(logging, config.LOG_LEVEL.upper())
    )

    # File handler –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ª–æ–≥—ñ–≤
    file_handler = logging.handlers.RotatingFileHandler(
        config.LOG_FILE,
        maxBytes=10 * 1024 * 1024,  # 10MB
        backupCount=5
    )
    file_handler.setLevel(logging.INFO)

    # File handler –¥–ª—è –ø–æ–º–∏–ª–æ–∫
    error_handler = logging.handlers.RotatingFileHandler(
        config.ERROR_LOG_FILE,
        maxBytes=10 * 1024 * 1024,  # 10MB
        backupCount=5
    )
    error_handler.setLevel(logging.ERROR)

    # –î–æ–¥–∞—î–º–æ handlers –¥–æ root logger
    root_logger = logging.getLogger()
    root_logger.addHandler(file_handler)
    root_logger.addHandler(error_handler)

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è aiogram (–º–µ–Ω—à–µ —Å–ø–∞–º—É)
    logging.getLogger("aiogram").setLevel(logging.WARNING)
    logging.getLogger("aiohttp").setLevel(logging.WARNING)


# ===================================

# backend/utils/constants.py
"""
–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –±–æ—Ç–∞
"""

# –ï–º–æ–¥–∑—ñ –¥–ª—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
EMOJI = {
    'rocket': 'üöÄ',
    'package': 'üì¶',
    'money': 'üí∞',
    'check': '‚úÖ',
    'cross': '‚ùå',
    'warning': '‚ö†Ô∏è',
    'info': '‚ÑπÔ∏è',
    'star': '‚≠ê',
    'fire': 'üî•',
    'heart': '‚ù§Ô∏è',
    'thumbs_up': 'üëç',
    'chart': 'üìä',
    'calendar': 'üìÖ',
    'time': '‚è±Ô∏è',
    'link': 'üîó',
    'admin': 'üë®‚Äçüíº',
    'bell': 'üîî',
    'settings': '‚öôÔ∏è'
}

# –¢–µ–∫—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
MESSAGES = {
    'welcome': f"{EMOJI['rocket']} <b>–í—ñ—Ç–∞—î–º–æ –≤ SocialBoost Bot!</b>\n\n–û–±–µ—Ä—ñ—Ç—å –ø–∞–∫–µ—Ç –¥–ª—è —Ä–æ–∑–∫—Ä—É—Ç–∫–∏ –≤–∞—à–∏—Ö –ø–æ—Å—Ç—ñ–≤:",

    'packages_header': f"{EMOJI['package']} <b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø–∞–∫–µ—Ç–∏:</b>",

    'order_created': f"{EMOJI['check']} –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n{EMOJI['money']} –°—É–º–∞: <b>{{amount}} {{currency}}</b>\n{EMOJI['package']} –ü–∞–∫–µ—Ç: <b>{{package_name}}</b>",

    'payment_success': f"{EMOJI['check']} <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!</b>\n\n–í–∞—à –ø–∞–∫–µ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø–æ—Å—Ç–∏ –¥–ª—è —Ä–æ–∑–∫—Ä—É—Ç–∫–∏.",

    'add_post_prompt': f"{EMOJI['link']} –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à –ø–æ—Å—Ç:",

    'post_added': f"{EMOJI['check']} <b>–ü–æ—Å—Ç –¥–æ–¥–∞–Ω–æ!</b>\n\n{EMOJI['chart']} –¶—ñ–ª—å–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:\n‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∏: {{views}}\n‚Ä¢ –†–µ–∞–∫—Ü—ñ—ó: {{reactions}}\n‚Ä¢ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ: {{comments}}\n‚Ä¢ –†–µ–ø–æ—Å—Ç–∏: {{reposts}}",

    'limit_reached': f"{EMOJI['warning']} <b>–õ—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ!</b>\n\n–í–∏ –¥–æ—Å—è–≥–ª–∏ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –≤–∞—à–æ–≥–æ –ø–∞–∫–µ—Ç—É.",

    'no_active_package': f"{EMOJI['info']} –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞–∫–µ—Ç—É. –û–±–µ—Ä—ñ—Ç—å –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏:",

    'invalid_url': f"{EMOJI['cross']} –ù–µ–≤—ñ—Ä–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π URL.",

    'admin_notification': f"{EMOJI['bell']} <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n\n{EMOJI['admin']} –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {{username}}\n{EMOJI['money']} –°—É–º–∞: {{amount}} {{currency}}\n{EMOJI['package']} –ü–∞–∫–µ—Ç: {{package_name}}\n{EMOJI['time']} –ß–∞—Å: {{time}}"
}


# –°—Ç–∞–Ω–∏ FSM
class UserStates:
    """–°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    WAITING_POST_URL = "waiting_post_url"
    SELECTING_PACKAGE = "selecting_package"
    CONFIRMING_ORDER = "confirming_order"


# Callback data –¥–ª—è –∫–Ω–æ–ø–æ–∫
CALLBACK_DATA = {
    'select_package': 'pkg_{}',
    'confirm_order': 'confirm_{}',
    'cancel_order': 'cancel_{}',
    'add_post': 'add_post',
    'my_stats': 'my_stats',
    'support': 'support'
}

# –ü–ª–∞—Ç—Ñ–æ—Ä–º–∏ –¥–ª—è –ø–æ—Å—Ç—ñ–≤
PLATFORMS = {
    'telegram': 'Telegram',
    'instagram': 'Instagram',
    'tiktok': 'TikTok',
    'youtube': 'YouTube'
}

# –í–∞–ª—ñ–¥–∞—Ü—ñ—è URL
URL_PATTERNS = {
    'telegram': r'https?://t\.me/\w+/\d+',
    'instagram': r'https?://(?:www\.)?instagram\.com/p/[\w-]+',
    'tiktok': r'https?://(?:www\.)?tiktok\.com/@[\w.]+/video/\d+',
    'youtube': r'https?://(?:www\.)?youtube\.com/watch\?v=[\w-]+'
}

# ===================================

# backend/utils/validators.py
"""
–í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
"""
import re
from typing import Optional, Tuple
from backend.utils.constants import URL_PATTERNS, PLATFORMS


def validate_post_url(url: str) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª—ñ–¥—É—î URL –ø–æ—Å—Ç–∞ —Ç–∞ –≤–∏–∑–Ω–∞—á–∞—î –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    –ü–æ–≤–µ—Ä—Ç–∞—î (is_valid, platform)
    """
    if not url or not isinstance(url, str):
        return False, None

    url = url.strip()

    for platform, pattern in URL_PATTERNS.items():
        if re.match(pattern, url, re.IGNORECASE):
            return True, platform

    return False, None


def validate_telegram_id(telegram_id: str) -> bool:
    """–í–∞–ª—ñ–¥—É—î Telegram ID"""
    if not telegram_id:
        return False

    try:
        # Telegram ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º
        int(telegram_id)
        return len(telegram_id) >= 5  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞
    except ValueError:
        return False


def sanitize_text(text: str, max_length: int = 1000) -> str:
    """–û—á–∏—â–∞—î —Ç–µ–∫—Å—Ç –≤—ñ–¥ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤"""
    if not text:
        return ""

    # –í–∏–¥–∞–ª—è—î–º–æ HTML —Ç–µ–≥–∏ (–æ–∫—Ä—ñ–º –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö)
    allowed_tags = ['b', 'strong', 'i', 'em', 'u', 'code', 'pre']

    # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É
    text = text[:max_length]

    return text.strip()