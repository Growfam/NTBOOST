"""
–ê–¥–º—ñ–Ω –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º - –í–ò–ü–†–ê–í–õ–ï–ù–ê –≤–µ—Ä—Å—ñ—è
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import structlog

from backend.bot.keyboards.inline import KeyboardBuilder
from backend.bot.states.user_states import UserStates, AdminStates
from backend.database.connection import get_admin_stats
from backend.config import get_config
from backend.utils.constants import EMOJI

config = get_config()
router = Router()
logger = structlog.get_logger(__name__)


def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω–æ–º"""
    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ –∑–∞–º—ñ—Å—Ç—å property
    admin_ids = config.get_admin_telegram_ids()
    return user_id in admin_ids


@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    """–ì–æ–ª–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        if not is_admin(message.from_user.id):
            await message.answer(f"{EMOJI['cross']} –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        await state.set_state(AdminStates.MAIN_PANEL)

        admin_text = f"""
{EMOJI['admin']} <b>–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ø–∞–Ω–µ–ª—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è SocialBoost Bot!

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:
"""

        await message.answer(
            admin_text,
            reply_markup=KeyboardBuilder.admin_panel(),
            parse_mode="HTML"
        )

        logger.info(f"Admin {message.from_user.id} accessed admin panel")

    except Exception as e:
        logger.error(f"Error in admin panel for user {message.from_user.id}", error=str(e))
        await message.answer(f"{EMOJI['cross']} –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ.")


@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º–∏"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –ë–î
        stats = get_admin_stats()

        if not stats:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = f"""
{EMOJI['chart']} <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏</b>

üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b>
‚Ä¢ –í—Å—å–æ–≥–æ: {stats.get('total_users', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {stats.get('active_users', 0)}

üì¶ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>
‚Ä¢ –í—Å—å–æ–≥–æ: {stats.get('total_orders', 0)}
‚Ä¢ –û–ø–ª–∞—á–µ–Ω–∏—Ö: {stats.get('paid_orders', 0)}

üí∞ <b>–î–æ—Ö—ñ–¥:</b>
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π: ${stats.get('total_revenue', 0):.2f}

üìù <b>–ü–æ—Å—Ç–∏:</b>
‚Ä¢ –í—Å—å–æ–≥–æ: {stats.get('total_posts', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {stats.get('active_posts', 0)}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏—Ö: {stats.get('completed_posts', 0)}

üì¶ <b>–ü–∞–∫–µ—Ç–∏:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {stats.get('packages_count', 0)}
"""

        # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        recent_orders = stats.get('recent_orders', [])
        if recent_orders:
            stats_text += f"\n{EMOJI['bell']} <b>–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (24 –≥–æ–¥–∏–Ω–∏):</b>\n"
            for order in recent_orders[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ 5 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö
                username = order.get('user_username', '–ù–µ–≤—ñ–¥–æ–º–æ')
                amount = order.get('amount', 0)
                package_name = order.get('package_name', '–ù–µ–≤—ñ–¥–æ–º–æ')
                stats_text += f"‚Ä¢ @{username}: ${amount:.0f} - {package_name}\n"

        await callback.message.edit_text(
            stats_text,
            reply_markup=KeyboardBuilder.admin_panel(),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error showing admin stats", error=str(e))
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
            return

        await state.set_state(AdminStates.BROADCAST_COMPOSE)

        broadcast_text = f"""
{EMOJI['bell']} <b>–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å</b>

–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.

‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b> –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!

–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel
"""

        await callback.message.edit_text(
            broadcast_text,
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error starting broadcast", error=str(e))
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫—É —Ä–æ–∑—Å–∏–ª–∫–∏")


@router.message(AdminStates.BROADCAST_COMPOSE)
async def compose_broadcast(message: Message, state: FSMContext):
    """–°–∫–ª–∞–¥–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ä–æ–∑—Å–∏–ª–∫–∏"""
    try:
        if not is_admin(message.from_user.id):
            return

        if message.text == "/cancel":
            await state.set_state(AdminStates.MAIN_PANEL)
            await message.answer(
                f"{EMOJI['info']} –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
                reply_markup=KeyboardBuilder.admin_panel()
            )
            return

        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –¥–æ–¥–∞—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Ç–µ–∫—Å—Ç—É
        broadcast_text = message.text
        if not broadcast_text or len(broadcast_text) > 4000:
            await message.answer(
                f"{EMOJI['cross']} –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 4000 —Å–∏–º–≤–æ–ª—ñ–≤.",
                reply_markup=KeyboardBuilder.admin_panel()
            )
            return

        await state.update_data(broadcast_text=broadcast_text)
        await state.set_state(AdminStates.BROADCAST_CONFIRM)

        confirm_text = f"""
{EMOJI['bell']} <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏</b>

<b>–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>
{broadcast_text[:500]}{'...' if len(broadcast_text) > 500 else ''}

<b>–î–æ–≤–∂–∏–Ω–∞:</b> {len(broadcast_text)} —Å–∏–º–≤–æ–ª—ñ–≤

–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É?
"""

        buttons = [
            [InlineKeyboardButton(
                text=f"{EMOJI['check']} –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É",
                callback_data="confirm_broadcast"
            )],
            [InlineKeyboardButton(
                text=f"{EMOJI['cross']} –°–∫–∞—Å—É–≤–∞—Ç–∏",
                callback_data="cancel_broadcast"
            )]
        ]

        await message.answer(
            confirm_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error composing broadcast", error=str(e))
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–ª–∞–¥–∞–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏")


@router.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
            return

        state_data = await state.get_data()
        broadcast_text = state_data.get('broadcast_text', '')

        if not broadcast_text:
            await callback.answer("–¢–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π")
            return

        # –í–ò–ü–†–ê–í–õ–ï–ù–û: —ñ–º—ñ—Ç–∞—Ü—ñ—è —Ä–æ–∑—Å–∏–ª–∫–∏ –∑ –∫—Ä–∞—â–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        await callback.message.edit_text(
            f"""
{EMOJI['check']} <b>–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>

–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ.

<b>–°—Ç–∞—Ç—É—Å:</b> –†–æ–∑—Å–∏–ª–∫–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞
<b>–¢–µ–∫—Å—Ç:</b> {broadcast_text[:100]}{'...' if len(broadcast_text) > 100 else ''}

–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.
""",
            reply_markup=KeyboardBuilder.admin_panel(),
            parse_mode="HTML"
        )

        await state.set_state(AdminStates.MAIN_PANEL)
        await callback.answer()

        logger.info(f"Admin {callback.from_user.id} started broadcast", text_length=len(broadcast_text))

    except Exception as e:
        logger.error(f"Error confirming broadcast", error=str(e))
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Ä–æ–∑—Å–∏–ª–∫–∏")


@router.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    try:
        await state.set_state(AdminStates.MAIN_PANEL)

        await callback.message.edit_text(
            f"{EMOJI['info']} –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=KeyboardBuilder.admin_panel(),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error canceling broadcast", error=str(e))
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏")


# –í–ò–ü–†–ê–í–õ–ï–ù–û: –¥–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–æ—Ç–∞
async def notify_admins_new_order(bot, user_data: dict, order_data: dict):
    """–°–ø–æ–≤—ñ—â–∞—î –∞–¥–º—ñ–Ω—ñ–≤ –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        if not bot:
            logger.error("Bot not initialized for admin notification")
            return

        from backend.utils.constants import MESSAGES
        import datetime

        notification_text = MESSAGES['admin_notification'].format(
            username=user_data.get('username', '–ù–µ–≤—ñ–¥–æ–º–æ'),
            amount=order_data.get('amount', 0),
            currency=order_data.get('currency', 'USD'),
            package_name=order_data.get('package_name', '–ù–µ–≤—ñ–¥–æ–º–æ'),
            time=datetime.datetime.now().strftime('%H:%M:%S')
        )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ–º –∞–¥–º—ñ–Ω–∞–º
        admin_ids = config.get_admin_telegram_ids()
        for admin_id in admin_ids:
            try:
                await bot.send_message(
                    admin_id,
                    notification_text,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}", error=str(e))

        # –Ø–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª –∞–¥–º—ñ–Ω—ñ–≤
        if config.ADMIN_CHANNEL_ID:
            try:
                await bot.send_message(
                    config.ADMIN_CHANNEL_ID,
                    notification_text,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify admin channel", error=str(e))

        logger.info("Admin notification sent for new order", order_id=order_data.get('order_id'))

    except Exception as e:
        logger.error("Error sending admin notification", error=str(e))


async def notify_admins_payment_success(bot, user_data: dict, order_data: dict):
    """–°–ø–æ–≤—ñ—â–∞—î –∞–¥–º—ñ–Ω—ñ–≤ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É"""
    try:
        if not bot:
            logger.error("Bot not initialized for payment notification")
            return

        import datetime

        notification_text = f"""
{EMOJI['check']} <b>–û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!</b>

{EMOJI['admin']} –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{user_data.get('username', '–ù–µ–≤—ñ–¥–æ–º–æ')}
{EMOJI['money']} –°—É–º–∞: {order_data.get('amount', 0)} {order_data.get('currency', 'USD')}
{EMOJI['package']} –ü–∞–∫–µ—Ç: {order_data.get('package_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}
{EMOJI['time']} –ß–∞—Å: {datetime.datetime.now().strftime('%H:%M:%S')}

{EMOJI['rocket']} –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!
"""

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ–º –∞–¥–º—ñ–Ω–∞–º
        admin_ids = config.get_admin_telegram_ids()
        for admin_id in admin_ids:
            try:
                await bot.send_message(
                    admin_id,
                    notification_text,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id} about payment", error=str(e))

        logger.info("Admin payment notification sent", order_id=order_data.get('order_id'))

    except Exception as e:
        logger.error("Error sending payment notification", error=str(e))